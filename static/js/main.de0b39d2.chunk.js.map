{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","position","switchPosition","e","props","images","itemWidth","step","frameSize","infinite","currentTarget","isEnd","length","textContent","Math","max","innerText","min","setState","this","animationDuration","className","style","width","transition","transform","map","img","name","slice","height","src","alt","type","onClick","disabled","React","Component","App","getSettingsFromForm","form","document","querySelector","data","FormData","entries","forEach","item","inputName","value","prevState","id","htmlFor","onChange","checked","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.de0b39d2.chunk.js","sourcesContent":["import React from 'react';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[];\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  step: number;\n  infinite: boolean;\n};\n\ntype State = {\n  position: number;\n};\n\nclass Carousel extends React.Component<Props, State> {\n  state: Readonly<State> = {\n    position: 0, // position of our scroll bar\n  };\n\n  switchPosition = (e: React.MouseEvent<HTMLButtonElement>) => {\n    const {\n      images,\n      itemWidth,\n      step,\n      frameSize,\n      infinite,\n    } = this.props;\n\n    const { currentTarget } = e;\n    let { position } = this.state;\n    const isEnd = -itemWidth * (images.length - frameSize);\n\n    if (currentTarget.textContent === 'Next') {\n      position -= itemWidth * step;\n      position = Math.max(position, isEnd);\n\n      if (infinite && this.state.position === isEnd) {\n        position = 0;\n      }\n    }\n\n    if (currentTarget.innerText === 'Prev') {\n      position += itemWidth * step;\n      position = Math.min(position, 0);\n\n      if (infinite && this.state.position === 0) {\n        position = isEnd;\n      }\n    }\n\n    this.setState({ position });\n  };\n\n  render() {\n    const {\n      images,\n      itemWidth,\n      frameSize,\n      infinite,\n      animationDuration,\n    } = this.props;\n\n    const { position } = this.state;\n    const isEnd = -itemWidth * (images.length - frameSize);\n\n    return (\n      <div\n        className=\"Carousel\"\n        style={{ width: `${itemWidth * frameSize}px` }}\n      >\n        <ul\n          className=\"Carousel__list\"\n          style={{\n            transition: `${animationDuration}ms`,\n            transform: `translateX(${position}px)`,\n          }}\n        >\n          {images.map(img => {\n            const name = img.slice(-5, -4);\n\n            return (\n              <li\n                style={{ height: `${itemWidth}px`, width: `${itemWidth}px` }}\n                key={name}\n                className=\"Carousel__item\"\n              >\n                <img\n                  src={img}\n                  alt={name}\n                  height={`${itemWidth}px`}\n                />\n              </li>\n            );\n          })}\n        </ul>\n\n        <div style={{ width: '100%', height: '25px' }}>\n          <button\n            className=\"button prev\"\n            type=\"button\"\n            onClick={this.switchPosition}\n            disabled={position === 0 && !infinite}\n          >\n            Prev\n          </button>\n\n          <button\n            className=\"button next\"\n            type=\"button\"\n            onClick={this.switchPosition}\n            data-cy=\"next\"\n            disabled={position === isEnd && !infinite}\n          >\n            Next\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Carousel;\n","import React from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\n\ninterface Field {\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n  step: number;\n}\ninterface State extends Field {\n  images: string[];\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    frameSize: 3,\n    animationDuration: 1000,\n    step: 3,\n    itemWidth: 130,\n    infinite: false,\n  };\n\n  getSettingsFromForm = () => {\n    const form: HTMLFormElement = document\n      .querySelector('#form') as HTMLFormElement;\n\n    const data: FormData = new FormData(form);\n\n    [...data.entries()].forEach(item => {\n      const [inputName, value] = item;\n\n      this.setState((prevState) => ({\n        ...prevState,\n        [inputName]: value,\n      }));\n    });\n  };\n\n  render() {\n    const {\n      images,\n      animationDuration,\n      itemWidth,\n      step,\n      frameSize,\n      infinite,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1 className=\"title\" data-cy=\"title\">\n          {`Carousel with ${images.length} images`}\n        </h1>\n\n        <form id=\"form\" className=\"form\">\n          <div className=\"form__field\">\n            <label htmlFor=\"itemWidth\" className=\"form__label\">\n              Item width\n            </label>\n\n            <span>{itemWidth}</span>\n\n            <input\n              type=\"range\"\n              name=\"itemWidth\"\n              id=\"itemWidth\"\n              max=\"300\"\n              value={itemWidth}\n              min=\"50\"\n              onChange={this.getSettingsFromForm}\n            />\n          </div>\n\n          <div className=\"form__field\">\n            <label htmlFor=\"frameSize\" className=\"form__label\">\n              Frame Size\n            </label>\n\n            <span>{frameSize}</span>\n\n            <input\n              type=\"range\"\n              name=\"frameSize\"\n              id=\"frameSize\"\n              min=\"1\"\n              max=\"5\"\n              value={frameSize}\n              onChange={this.getSettingsFromForm}\n            />\n          </div>\n\n          <div className=\"form__field\">\n            <label htmlFor=\"step\" className=\"form__label\">\n              Step\n            </label>\n\n            <span>{step}</span>\n\n            <input\n              type=\"range\"\n              name=\"step\"\n              id=\"step\"\n              min=\"1\"\n              max=\"5\"\n              value={step}\n              onChange={this.getSettingsFromForm}\n            />\n          </div>\n\n          <div className=\"form__field\">\n            <label htmlFor=\"animationDuration\" className=\"form__label\">\n              Animation Duration\n            </label>\n\n            <span>{animationDuration}</span>\n\n            <input\n              type=\"range\"\n              name=\"animationDuration\"\n              id=\"animationDuration\"\n              max=\"3000\"\n              min=\"500\"\n              value={animationDuration}\n              onChange={this.getSettingsFromForm}\n            />\n          </div>\n\n          <div className=\"form__field\">\n            <label htmlFor=\"infinite\">\n              infinite\n            </label>\n\n            <input\n              id=\"infinite\"\n              name=\"infinite\"\n              type=\"checkbox\"\n              checked={infinite}\n              onChange={() => this.setState({ infinite: !infinite })}\n            />\n          </div>\n        </form>\n\n        <Carousel\n          images={images}\n          frameSize={frameSize}\n          itemWidth={itemWidth}\n          animationDuration={animationDuration}\n          step={step}\n          infinite={infinite}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}